/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/
package disk

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	//"time"
	pubUserFile "github.com/city404/v6-public-rpc-proto/go/v6/userfile"
	"github.com/ipfs/boxo/blockservice"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github.com/ipfs/boxo/ipld/unixfs/importer/balanced"

	//pubUserFile "github.com/city404/v6-public-rpc-proto/go/v6/userfile"
	"github.com/halalcloud/golang-sdk/auth"
	"github.com/halalcloud/golang-sdk/constants"
	"github.com/halalcloud/golang-sdk/ipfs"
	"github.com/halalcloud/golang-sdk/pkg/print"
	"github.com/halalcloud/golang-sdk/utils"
	"github.com/ipfs/boxo/ipld/merkledag"

	// ipld "github.com/ipfs/go-ipld-format"
	"github.com/spf13/cobra"
	"github.com/zzzhr1990/go-common-entity/userfile"

	//"google.golang.org/grpc/codes"
	//"google.golang.org/grpc/status"
	chunker "github.com/ipfs/boxo/chunker"
	"github.com/ipfs/boxo/ipld/unixfs/importer/helpers"
)

// UploadCmd represents the mkdir command
var UploadCmd = &cobra.Command{
	Use:     "upload",
	Short:   "A brief description of your command",
	Aliases: []string{"up"},
	Long: `A longer description that spans multiple lines and likely contains examples
and usage of using your command. For example:

Cobra is a CLI library for Go that empowers applications.
This application is a tool to generate the needed files
to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		currentDir := utils.GetCurrentDir()
		serv, err := auth.NewAuthService(constants.AppID, constants.AppVersion, constants.AppSecret, "")
		if err != nil {
			fmt.Println(err)
			return
		}
		if len(args) == 0 {
			fmt.Println("create: missing operand")
			return
		}
		serv.GetGrpcConnection()

		// get last arg, and check if it is a file
		lastArg := args[len(args)-1]
		if !utils.IsFile(lastArg) {
			fmt.Println("create: last operand " + lastArg + " must be a file")
			return
		}
		path, _ := filepath.Abs(lastArg)
		fileInfo, err := os.Stat(path)
		if err != nil {
			fmt.Println(err)
			return
		}

		log.Printf("file: %s, file path: %s", fileInfo.Name(), path)

		newDir := userfile.NewFormattedPath(utils.GetCurrentDir()).GetPath()
		newDir = strings.TrimSuffix(newDir, "/") + "/" + fileInfo.Name()

		helpers.BlockSizeLimit = constants.IpfsDefaultBlockSize * 2
		/*
			sp := print.Spinner(os.Stdout, "Upload File [%s] ...", newDir)
			ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)
			defer cancel()
			result, err := pubUserFile.NewPubUserFileClient(serv.GetGrpcConnection()).CreateUploadTask(ctx, &pubUserFile.File{
				// Parent: &pubUserFile.File{Path: currentDir},
				Path: newDir,
				//ContentIdentity: args[1],
			})
			if err != nil {
				sp(false)
				status, ok := status.FromError(err)
				if ok {
					if status.Code() == codes.NotFound {
						fmt.Printf("Directory [%s] not found, back to root.\n", currentDir)
						utils.SetCurrentDir("/")
						return
					}
				}
				fmt.Println(err)
				return
			}
			sp(true)
		*/
		fi, err := os.Open(path)
		if err != nil {
			fmt.Println(err)
			return
		}
		defer fi.Close()
		reader := fi

		print.InfoStatusEvent(os.Stdout, "Starting upload [%s].", path)
		bserv := blockservice.New(&ipfs.NullBlockstore{}, nil)
		dserv := merkledag.NewDAGService(bserv)
		// -^-^-
		chnk := chunker.NewSizeSplitter(reader, constants.IpfsDefaultBlockSize)
		params := helpers.DagBuilderParams{
			Dagserv:    dserv,
			RawLeaves:  true,
			Maxlinks:   constants.IpfsMaxLinks,
			NoCopy:     false,
			CidBuilder: merkledag.V1CidPrefix(),
			//FileMode:    adder.FileMode,
			//FileModTime: adder.FileMtime,
		}

		db, err := params.New(chnk)
		if err != nil {
			print.FailureStatusEvent(os.Stdout, "New DagBuilder error: %s", err)
			return
		}
		//if adder.Trickle {
		//	nd, err = trickle.Layout(db)
		//} else {
		nd, err := balanced.Layout(db)
		//}
		if err != nil {
			print.FailureStatusEvent(os.Stdout, "Layout error: %s", err)
			return
		}

		cid := nd.Cid()
		print.SuccessStatusEvent(os.Stdout, "CID: %s", cid.String())
		ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)
		defer cancel()
		result, err := pubUserFile.NewPubUserFileClient(serv.GetGrpcConnection()).CreateUploadTask(ctx, &pubUserFile.File{
			// Parent: &pubUserFile.File{Path: currentDir},
			Path:            newDir,
			ContentIdentity: cid.String(),
			Size:            fileInfo.Size(),
			//ContentIdentity: args[1],
		})
		if err != nil {
			status, ok := status.FromError(err)
			if ok {
				if status.Code() == codes.NotFound {
					fmt.Printf("Directory [%s] not found, back to root.\n", currentDir)
					utils.SetCurrentDir("/")
					return
				}
			}
			fmt.Println(err)
			return
		}
		if result.Created {
			print.SuccessStatusEvent(os.Stdout, "Upload Success. (Fast Upload)")
			return
		}
		// http://192.168.16.1/
		result.UploadAddress = "http://192.168.16.1/int/ipfs"
		print.InfoStatusEvent(os.Stdout, "Starting upload [%s => %s].", result.UploadAddress, result.Task)
		httpClient := &http.Client{
			Timeout: time.Second * 90,
		}
		reader.Seek(0, io.SeekStart)
		uploadDagService := merkledag.NewDAGService(blockservice.New(ipfs.NewUploadBlockstore(httpClient, result.UploadAddress, result.Task, cid.String()), nil))
		params = helpers.DagBuilderParams{
			Dagserv:    uploadDagService,
			RawLeaves:  true,
			Maxlinks:   constants.IpfsMaxLinks,
			NoCopy:     false,
			CidBuilder: merkledag.V1CidPrefix(),
			//FileMode:    adder.FileMode,
			//FileModTime: adder.FileMtime,
		}
		chnk = chunker.NewSizeSplitter(reader, constants.IpfsDefaultBlockSize)

		db, err = params.New(chnk)
		if err != nil {
			print.FailureStatusEvent(os.Stdout, "New UploadDagBuilder error: %s", err)
			return
		}
		//if adder.Trickle {
		//	nd, err = trickle.Layout(db)
		//} else {
		nd, err = balanced.Layout(db)
		//}
		if err != nil {
			print.FailureStatusEvent(os.Stdout, "Layout error: %s", err)
			return
		}

		newCid := nd.Cid()
		print.SuccessStatusEvent(os.Stdout, "Upload CID: %s", newCid.String())
		print.SuccessStatusEvent(os.Stdout, "Upload Success.")
	},
}

func init() {
	DiskCmd.AddCommand(UploadCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// mkdirCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// mkdirCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
